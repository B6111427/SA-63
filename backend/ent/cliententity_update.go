// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/B6111427/app/ent/booking"
	"github.com/B6111427/app/ent/cliententity"
	"github.com/B6111427/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ClientEntityUpdate is the builder for updating ClientEntity entities.
type ClientEntityUpdate struct {
	config
	hooks      []Hook
	mutation   *ClientEntityMutation
	predicates []predicate.ClientEntity
}

// Where adds a new predicate for the builder.
func (ceu *ClientEntityUpdate) Where(ps ...predicate.ClientEntity) *ClientEntityUpdate {
	ceu.predicates = append(ceu.predicates, ps...)
	return ceu
}

// SetCLIENTNAME sets the CLIENT_NAME field.
func (ceu *ClientEntityUpdate) SetCLIENTNAME(s string) *ClientEntityUpdate {
	ceu.mutation.SetCLIENTNAME(s)
	return ceu
}

// SetCLIENTSTATUS sets the CLIENT_STATUS field.
func (ceu *ClientEntityUpdate) SetCLIENTSTATUS(s string) *ClientEntityUpdate {
	ceu.mutation.SetCLIENTSTATUS(s)
	return ceu
}

// AddBookedIDs adds the booked edge to Booking by ids.
func (ceu *ClientEntityUpdate) AddBookedIDs(ids ...int) *ClientEntityUpdate {
	ceu.mutation.AddBookedIDs(ids...)
	return ceu
}

// AddBooked adds the booked edges to Booking.
func (ceu *ClientEntityUpdate) AddBooked(b ...*Booking) *ClientEntityUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ceu.AddBookedIDs(ids...)
}

// Mutation returns the ClientEntityMutation object of the builder.
func (ceu *ClientEntityUpdate) Mutation() *ClientEntityMutation {
	return ceu.mutation
}

// RemoveBookedIDs removes the booked edge to Booking by ids.
func (ceu *ClientEntityUpdate) RemoveBookedIDs(ids ...int) *ClientEntityUpdate {
	ceu.mutation.RemoveBookedIDs(ids...)
	return ceu
}

// RemoveBooked removes booked edges to Booking.
func (ceu *ClientEntityUpdate) RemoveBooked(b ...*Booking) *ClientEntityUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ceu.RemoveBookedIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ceu *ClientEntityUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ceu.mutation.CLIENTNAME(); ok {
		if err := cliententity.CLIENTNAMEValidator(v); err != nil {
			return 0, &ValidationError{Name: "CLIENT_NAME", err: fmt.Errorf("ent: validator failed for field \"CLIENT_NAME\": %w", err)}
		}
	}
	if v, ok := ceu.mutation.CLIENTSTATUS(); ok {
		if err := cliententity.CLIENTSTATUSValidator(v); err != nil {
			return 0, &ValidationError{Name: "CLIENT_STATUS", err: fmt.Errorf("ent: validator failed for field \"CLIENT_STATUS\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ceu.hooks) == 0 {
		affected, err = ceu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClientEntityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ceu.mutation = mutation
			affected, err = ceu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ceu.hooks) - 1; i >= 0; i-- {
			mut = ceu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ceu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *ClientEntityUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *ClientEntityUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *ClientEntityUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ceu *ClientEntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cliententity.Table,
			Columns: cliententity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cliententity.FieldID,
			},
		},
	}
	if ps := ceu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.CLIENTNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cliententity.FieldCLIENTNAME,
		})
	}
	if value, ok := ceu.mutation.CLIENTSTATUS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cliententity.FieldCLIENTSTATUS,
		})
	}
	if nodes := ceu.mutation.RemovedBookedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cliententity.BookedTable,
			Columns: []string{cliententity.BookedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.BookedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cliententity.BookedTable,
			Columns: []string{cliententity.BookedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cliententity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClientEntityUpdateOne is the builder for updating a single ClientEntity entity.
type ClientEntityUpdateOne struct {
	config
	hooks    []Hook
	mutation *ClientEntityMutation
}

// SetCLIENTNAME sets the CLIENT_NAME field.
func (ceuo *ClientEntityUpdateOne) SetCLIENTNAME(s string) *ClientEntityUpdateOne {
	ceuo.mutation.SetCLIENTNAME(s)
	return ceuo
}

// SetCLIENTSTATUS sets the CLIENT_STATUS field.
func (ceuo *ClientEntityUpdateOne) SetCLIENTSTATUS(s string) *ClientEntityUpdateOne {
	ceuo.mutation.SetCLIENTSTATUS(s)
	return ceuo
}

// AddBookedIDs adds the booked edge to Booking by ids.
func (ceuo *ClientEntityUpdateOne) AddBookedIDs(ids ...int) *ClientEntityUpdateOne {
	ceuo.mutation.AddBookedIDs(ids...)
	return ceuo
}

// AddBooked adds the booked edges to Booking.
func (ceuo *ClientEntityUpdateOne) AddBooked(b ...*Booking) *ClientEntityUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ceuo.AddBookedIDs(ids...)
}

// Mutation returns the ClientEntityMutation object of the builder.
func (ceuo *ClientEntityUpdateOne) Mutation() *ClientEntityMutation {
	return ceuo.mutation
}

// RemoveBookedIDs removes the booked edge to Booking by ids.
func (ceuo *ClientEntityUpdateOne) RemoveBookedIDs(ids ...int) *ClientEntityUpdateOne {
	ceuo.mutation.RemoveBookedIDs(ids...)
	return ceuo
}

// RemoveBooked removes booked edges to Booking.
func (ceuo *ClientEntityUpdateOne) RemoveBooked(b ...*Booking) *ClientEntityUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ceuo.RemoveBookedIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ceuo *ClientEntityUpdateOne) Save(ctx context.Context) (*ClientEntity, error) {
	if v, ok := ceuo.mutation.CLIENTNAME(); ok {
		if err := cliententity.CLIENTNAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "CLIENT_NAME", err: fmt.Errorf("ent: validator failed for field \"CLIENT_NAME\": %w", err)}
		}
	}
	if v, ok := ceuo.mutation.CLIENTSTATUS(); ok {
		if err := cliententity.CLIENTSTATUSValidator(v); err != nil {
			return nil, &ValidationError{Name: "CLIENT_STATUS", err: fmt.Errorf("ent: validator failed for field \"CLIENT_STATUS\": %w", err)}
		}
	}

	var (
		err  error
		node *ClientEntity
	)
	if len(ceuo.hooks) == 0 {
		node, err = ceuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClientEntityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ceuo.mutation = mutation
			node, err = ceuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ceuo.hooks) - 1; i >= 0; i-- {
			mut = ceuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ceuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *ClientEntityUpdateOne) SaveX(ctx context.Context) *ClientEntity {
	ce, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ce
}

// Exec executes the query on the entity.
func (ceuo *ClientEntityUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *ClientEntityUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ceuo *ClientEntityUpdateOne) sqlSave(ctx context.Context) (ce *ClientEntity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cliententity.Table,
			Columns: cliententity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cliententity.FieldID,
			},
		},
	}
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ClientEntity.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ceuo.mutation.CLIENTNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cliententity.FieldCLIENTNAME,
		})
	}
	if value, ok := ceuo.mutation.CLIENTSTATUS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cliententity.FieldCLIENTSTATUS,
		})
	}
	if nodes := ceuo.mutation.RemovedBookedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cliententity.BookedTable,
			Columns: []string{cliententity.BookedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.BookedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cliententity.BookedTable,
			Columns: []string{cliententity.BookedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ce = &ClientEntity{config: ceuo.config}
	_spec.Assign = ce.assignValues
	_spec.ScanValues = ce.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cliententity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ce, nil
}
