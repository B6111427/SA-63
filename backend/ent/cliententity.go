// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/B6111427/app/ent/cliententity"
	"github.com/facebookincubator/ent/dialect/sql"
)

// ClientEntity is the model entity for the ClientEntity schema.
type ClientEntity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CLIENTNAME holds the value of the "CLIENT_NAME" field.
	CLIENTNAME string `json:"CLIENT_NAME,omitempty"`
	// CLIENTSTATUS holds the value of the "CLIENT_STATUS" field.
	CLIENTSTATUS string `json:"CLIENT_STATUS,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClientEntityQuery when eager-loading is set.
	Edges ClientEntityEdges `json:"edges"`
}

// ClientEntityEdges holds the relations/edges for other nodes in the graph.
type ClientEntityEdges struct {
	// Booked holds the value of the booked edge.
	Booked []*Booking
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BookedOrErr returns the Booked value or an error if the edge
// was not loaded in eager-loading.
func (e ClientEntityEdges) BookedOrErr() ([]*Booking, error) {
	if e.loadedTypes[0] {
		return e.Booked, nil
	}
	return nil, &NotLoadedError{edge: "booked"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClientEntity) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // CLIENT_NAME
		&sql.NullString{}, // CLIENT_STATUS
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClientEntity fields.
func (ce *ClientEntity) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cliententity.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ce.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field CLIENT_NAME", values[0])
	} else if value.Valid {
		ce.CLIENTNAME = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field CLIENT_STATUS", values[1])
	} else if value.Valid {
		ce.CLIENTSTATUS = value.String
	}
	return nil
}

// QueryBooked queries the booked edge of the ClientEntity.
func (ce *ClientEntity) QueryBooked() *BookingQuery {
	return (&ClientEntityClient{config: ce.config}).QueryBooked(ce)
}

// Update returns a builder for updating this ClientEntity.
// Note that, you need to call ClientEntity.Unwrap() before calling this method, if this ClientEntity
// was returned from a transaction, and the transaction was committed or rolled back.
func (ce *ClientEntity) Update() *ClientEntityUpdateOne {
	return (&ClientEntityClient{config: ce.config}).UpdateOne(ce)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ce *ClientEntity) Unwrap() *ClientEntity {
	tx, ok := ce.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClientEntity is not a transactional entity")
	}
	ce.config.driver = tx.drv
	return ce
}

// String implements the fmt.Stringer.
func (ce *ClientEntity) String() string {
	var builder strings.Builder
	builder.WriteString("ClientEntity(")
	builder.WriteString(fmt.Sprintf("id=%v", ce.ID))
	builder.WriteString(", CLIENT_NAME=")
	builder.WriteString(ce.CLIENTNAME)
	builder.WriteString(", CLIENT_STATUS=")
	builder.WriteString(ce.CLIENTSTATUS)
	builder.WriteByte(')')
	return builder.String()
}

// ClientEntities is a parsable slice of ClientEntity.
type ClientEntities []*ClientEntity

func (ce ClientEntities) config(cfg config) {
	for _i := range ce {
		ce[_i].config = cfg
	}
}
