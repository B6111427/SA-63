basePath: /api/v1
definitions:
  controllers.Booking:
    properties:
      bookingDate:
        type: string
      bookingtype:
        type: integer
      client:
        type: integer
      timeLeft:
        type: string
      user:
        type: integer
    type: object
  ent.Booking:
    properties:
      BOOKING_DATE:
        description: BOOKINGDATE holds the value of the "BOOKING_DATE" field.
        type: string
      TIME_LEFT:
        description: TIMELEFT holds the value of the "TIME_LEFT" field.
        type: string
      bookingtype_ID:
        type: integer
      client_ID:
        type: integer
      edges:
        $ref: '#/definitions/ent.BookingEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the BookingQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      user_ID:
        type: integer
    type: object
  ent.BookingEdges:
    properties:
      book:
        $ref: '#/definitions/ent.Bookingtype'
        description: Book holds the value of the book edge.
        type: object
      usedby:
        $ref: '#/definitions/ent.User'
        description: Usedby holds the value of the usedby edge.
        type: object
      using:
        $ref: '#/definitions/ent.ClientEntity'
        description: Using holds the value of the using edge.
        type: object
    type: object
  ent.Bookingtype:
    properties:
      BOOKTYPE_NAME:
        description: BOOKTYPENAME holds the value of the "BOOKTYPE_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.BookingtypeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the BookingtypeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.BookingtypeEdges:
    properties:
      booktype:
        description: Booktype holds the value of the booktype edge.
        items:
          $ref: '#/definitions/ent.Booking'
        type: array
    type: object
  ent.ClientEntity:
    properties:
      CLIENT_NAME:
        description: CLIENTNAME holds the value of the "CLIENT_NAME" field.
        type: string
      CLIENT_STATUS:
        description: CLIENTSTATUS holds the value of the "CLIENT_STATUS" field.
        type: string
      edges:
        $ref: '#/definitions/ent.ClientEntityEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ClientEntityQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.ClientEntityEdges:
    properties:
      booked:
        description: Booked holds the value of the booked edge.
        items:
          $ref: '#/definitions/ent.Booking'
        type: array
    type: object
  ent.Role:
    properties:
      ROLE_NAME:
        description: ROLENAME holds the value of the "ROLE_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.RoleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoleQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.RoleEdges:
    properties:
      role:
        description: Role holds the value of the role edge.
        items:
          $ref: '#/definitions/ent.User'
        type: array
    type: object
  ent.User:
    properties:
      USER_EMAIL:
        description: USEREMAIL holds the value of the "USER_EMAIL" field.
        type: string
      USER_NAME:
        description: USERNAME holds the value of the "USER_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      role_ID:
        type: integer
    type: object
  ent.UserEdges:
    properties:
      booking:
        description: Booking holds the value of the booking edge.
        items:
          $ref: '#/definitions/ent.Booking'
        type: array
      roleplay:
        $ref: '#/definitions/ent.Role'
        description: Roleplay holds the value of the roleplay edge.
        type: object
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /bookings:
    get:
      description: list booking entities
      operationId: list-booking
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Booking'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List booking entities
    post:
      consumes:
      - application/json
      description: Create booking
      operationId: create-booking
      parameters:
      - description: Booking entity
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/controllers.Booking'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Booking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create booking
  /bookings/{id}:
    delete:
      description: get booking by ID
      operationId: delete-booking
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a booking entity by ID
    get:
      description: get booking by ID
      operationId: get-booking
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Booking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a booking entity by ID
    put:
      consumes:
      - application/json
      description: update booking by ID
      operationId: update-booking
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: integer
      - description: Booking entity
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/ent.Booking'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Booking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a booking entity by ID
  /bookingtypes:
    get:
      description: list bookingtype entities
      operationId: list-bookingtype
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Bookingtype'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List bookingtype entities
    post:
      consumes:
      - application/json
      description: Create bookingtype
      operationId: create-bookingtype
      parameters:
      - description: Bookingtype entity
        in: body
        name: bookingtype
        required: true
        schema:
          $ref: '#/definitions/ent.Bookingtype'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bookingtype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create bookingtype
  /bookingtypes/{id}:
    delete:
      description: get bookingtype by ID
      operationId: delete-bookingtype
      parameters:
      - description: Bookingtype ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a bookingtype entity by ID
    get:
      description: get bookingtype by ID
      operationId: get-bookingtype
      parameters:
      - description: Bookingtype ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bookingtype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a bookingtype entity by ID
    put:
      consumes:
      - application/json
      description: update bookingtype by ID
      operationId: update-bookingtype
      parameters:
      - description: Bookingtype ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bookingtype entity
        in: body
        name: bookingtype
        required: true
        schema:
          $ref: '#/definitions/ent.Bookingtype'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bookingtype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a bookingtype entity by ID
  /cliententitys:
    get:
      description: list cliententity entities
      operationId: list-cliententity
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Status
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.ClientEntity'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List cliententity entities
    post:
      consumes:
      - application/json
      description: Create cliententity
      operationId: create-cliententity
      parameters:
      - description: ClientEntity entity
        in: body
        name: cliententity
        required: true
        schema:
          $ref: '#/definitions/ent.ClientEntity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ClientEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create cliententity
  /cliententitys/{id}:
    delete:
      description: get cliententity by ID
      operationId: delete-cliententity
      parameters:
      - description: Cliententity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a cliententity entity by ID
    get:
      description: get cliententity by ID
      operationId: get-cliententity
      parameters:
      - description: ClientEntity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ClientEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a cliententity entity by ID
    put:
      consumes:
      - application/json
      description: update cliententity by ID
      operationId: update-cliententity
      parameters:
      - description: ClientEntity ID
        in: path
        name: id
        required: true
        type: integer
      - description: ClientEntity entity
        in: body
        name: cliententity
        required: true
        schema:
          $ref: '#/definitions/ent.ClientEntity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ClientEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a cliententity entity by ID
  /roles:
    get:
      description: list role entities
      operationId: list-role
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Role'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List role entities
    post:
      consumes:
      - application/json
      description: Create role
      operationId: create-role
      parameters:
      - description: Role entity
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/ent.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create role
  /roles/{id}:
    delete:
      description: get role by ID
      operationId: delete-role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a role entity by ID
    get:
      description: get role by ID
      operationId: get-role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a role entity by ID
    put:
      consumes:
      - application/json
      description: update role by ID
      operationId: update-role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role entity
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/ent.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a role entity by ID
  /users:
    get:
      description: list user entities
      operationId: list-user
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List user entities
    post:
      consumes:
      - application/json
      description: Create user
      operationId: create-user
      parameters:
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create user
  /users/{id}:
    delete:
      description: get user by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a user entity by ID
    get:
      description: get user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a user entity by ID
    put:
      consumes:
      - application/json
      description: update user by ID
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a user entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
